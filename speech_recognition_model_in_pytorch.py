# -*- coding: utf-8 -*-
"""Speech Recognition model in PyTorch

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zF80tm9ee5olWAFV5qhfdNYppbvV_xUl
"""

!pip install torchaudio==0.4.0 torch==1.4.0 python-Levenshtein==0.12.1 jiwer==2.2.0

"""## Setting up your data pipeline"""

import itertools
import os
import string
from typing import List, Dict

import Levenshtein
import jiwer
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import torch.utils.data as data
import torchaudio
from torch import Tensor
from torch.utils.data import DataLoader

def avg_wer(wer_scores: List[float], combined_ref_len: int) -> float:
    return float(sum(wer_scores)) / float(combined_ref_len)


def wer(reference: str, hypothesis: str) -> float:
    ref_words = reference.split(' ')
    ref_len = len(ref_words)
    if ref_len == 0:
        raise ValueError("Reference's word number should be greater than 0.")
    hyp_words = hypothesis.split(' ')
    word_edit = 0
    for ref_word, hyp_word in itertools.zip_longest(ref_words, hyp_words, fillvalue=' '):
        distance = Levenshtein.distance(ref_word, hyp_word)
        word_edit += 0 if distance == 0 else 1

    return float(word_edit) / ref_len


def cer(reference: str, hypothesis: str):
    ref_len = len(reference)
    if ref_len == 0:
        raise ValueError("Length of reference should be greater than 0.")
    join_char = ' '
    reference = join_char.join(filter(None, reference.split(' ')))
    hypothesis = join_char.join(filter(None, hypothesis.split(' ')))
    edit_distance = Levenshtein.distance(reference, hypothesis)

    return float(edit_distance) / ref_len


class TextTransform:
    def __init__(self):
        self.char_map: Dict[str, int] = {}
        self.index_map: Dict[int, str] = {}
        alphabets = list(string.ascii_lowercase)
        alphabets.insert(0, ' ')
        alphabets.insert(1, '<SPACE>')
        for idx, alpha in enumerate(alphabets):
            self.char_map[alpha] = idx
            self.index_map[idx] = alpha
        self.preprocess = jiwer.Compose([
            jiwer.ToLowerCase(),
            jiwer.ExpandCommonEnglishContractions(),
            jiwer.RemovePunctuation(),
            jiwer.RemoveMultipleSpaces()
        ])

    def text_to_int(self, text: str):
        text = self.preprocess(text)
        int_sequence = []
        for char in text:
            char = '<SPACE>' if char == ' ' else char
            int_sequence.append(self.char_map[char])
        return int_sequence

    def int_to_text(self, labels: List[int]):
        str_label = []
        for int_repr in labels:
            str_label.append(self.index_map[int_repr])
        return ''.join(str_label).replace('<SPACE>', ' ')


def _train_audio_transforms(sample_rate: int):
    return nn.Sequential(
        torchaudio.transforms.MelSpectrogram(sample_rate=sample_rate),
        torchaudio.transforms.FrequencyMasking(freq_mask_param=30),
        torchaudio.transforms.TimeMasking(time_mask_param=100)
    )


def _valid_audio_transforms(sample_rate: int):
    return torchaudio.transforms.MelSpectrogram(sample_rate=sample_rate)


text_transform = TextTransform()


def preprocessing(data, data_type="train") -> (List[Tensor], List[Tensor], List[int], List[int], List[str]):
    spectrograms = []
    labels = []
    input_lengths = []
    label_lengths = []
    for (waveform, sample_rate, utterance, _, _, _) in data:
        if data_type == 'train':
            spectrogram = _train_audio_transforms(sample_rate=sample_rate)(waveform)
        else:
            spectrogram = _valid_audio_transforms(sample_rate=sample_rate)(waveform)
        spectrogram = spectrogram.squeeze(0).transpose(0, 1)
        spectrograms.append(spectrogram)
        label = torch.Tensor(text_transform.text_to_int(utterance.lower()))
        labels.append(label)
        input_lengths.append(spectrogram.shape[0] // 2)
        label_lengths.append(len(label))

    spectrograms = nn.utils.rnn.pad_sequence(spectrograms, batch_first=True).unsqueeze(1).transpose(2, 3)
    labels = nn.utils.rnn.pad_sequence(labels, batch_first=True)

    return spectrograms, labels, input_lengths, label_lengths


def greedy_decoder(output, labels, label_lengths, blank_label=28, collapse_repeated=True):
    arg_maxes = torch.argmax(output, dim=2)
    decodes = []
    targets = []
    for i, args in enumerate(arg_maxes):
        decode = []
        targets.append(text_transform.int_to_text(labels[i][:label_lengths[i]].tolist()))
        for j, index in enumerate(args):
            if index != blank_label:
                if collapse_repeated and j != 0 and index == args[j - 1]:
                    continue
                decode.append(index.item())
        decodes.append(text_transform.int_to_text(decode))
    return decodes, targets

"""## The Model
Base of of Deep Speech 2 with some personal improvements
"""

class CNNLayerNorm(nn.Module):
    """Layer normalization built for cnns input"""

    def __init__(self, n_feats):
        super(CNNLayerNorm, self).__init__()
        self.layer_norm = nn.LayerNorm(n_feats)

    def forward(self, x):
        # x (batch, channel, feature, time)
        x = x.transpose(2, 3).contiguous()  # (batch, channel, time, feature)
        x = self.layer_norm(x)
        return x.transpose(2, 3).contiguous()  # (batch, channel, feature, time)


class ResidualCNN(nn.Module):
    """Residual CNN inspired by https://arxiv.org/pdf/1603.05027.pdf
        except with layer norm instead of batch norm
    """

    def __init__(self, in_channels, out_channels, kernel, stride, dropout, n_feats):
        super(ResidualCNN, self).__init__()

        self.cnn1 = nn.Conv2d(in_channels, out_channels, kernel, stride, padding=kernel // 2)
        self.cnn2 = nn.Conv2d(out_channels, out_channels, kernel, stride, padding=kernel // 2)
        self.dropout1 = nn.Dropout(dropout)
        self.dropout2 = nn.Dropout(dropout)
        self.layer_norm1 = CNNLayerNorm(n_feats)
        self.layer_norm2 = CNNLayerNorm(n_feats)

    def forward(self, x):
        residual = x  # (batch, channel, feature, time)
        x = self.layer_norm1(x)
        x = F.gelu(x)
        x = self.dropout1(x)
        x = self.cnn1(x)
        x = self.layer_norm2(x)
        x = F.gelu(x)
        x = self.dropout2(x)
        x = self.cnn2(x)
        x += residual
        return x  # (batch, channel, feature, time)


class BidirectionalGRU(nn.Module):

    def __init__(self, rnn_dim, hidden_size, dropout, batch_first):
        super(BidirectionalGRU, self).__init__()

        self.BiGRU = nn.GRU(
            input_size=rnn_dim, hidden_size=hidden_size,
            num_layers=1, batch_first=batch_first, bidirectional=True)
        self.layer_norm = nn.LayerNorm(rnn_dim)
        self.dropout = nn.Dropout(dropout)

    def forward(self, x):
        x = self.layer_norm(x)
        x = F.gelu(x)
        x, _ = self.BiGRU(x)
        x = self.dropout(x)
        return x


class SpeechRecognitionModel(nn.Module):

    def __init__(self, n_cnn_layers, n_rnn_layers, rnn_dim, n_class, n_feats, stride=2, dropout=0.1):
        super(SpeechRecognitionModel, self).__init__()
        n_feats = n_feats // 2
        self.cnn = nn.Conv2d(1, 32, 3, stride=stride, padding=1)  # cnn for extracting heirachal features

        # n residual cnn layers with filter size of 32
        self.rescnn_layers = nn.Sequential(*[
            ResidualCNN(32, 32, kernel=3, stride=1, dropout=dropout, n_feats=n_feats)
            for _ in range(n_cnn_layers)
        ])
        self.fully_connected = nn.Linear(n_feats * 32, rnn_dim)
        self.birnn_layers = nn.Sequential(*[
            BidirectionalGRU(rnn_dim=rnn_dim if i == 0 else rnn_dim * 2,
                             hidden_size=rnn_dim, dropout=dropout, batch_first=i == 0)
            for i in range(n_rnn_layers)
        ])
        self.classifier = nn.Sequential(
            nn.Linear(rnn_dim * 2, rnn_dim),  # birnn returns rnn_dim*2
            nn.GELU(),
            nn.Dropout(dropout),
            nn.Linear(rnn_dim, n_class)
        )

    def forward(self, x):
        x = self.cnn(x)
        x = self.rescnn_layers(x)
        sizes = x.size()
        x = x.view(sizes[0], sizes[1] * sizes[2], sizes[3])  # (batch, feature, time)
        x = x.transpose(1, 2)  # (batch, time, feature)
        x = self.fully_connected(x)
        x = self.birnn_layers(x)
        x = self.classifier(x)
        return x

"""## The Training and Evaluating Script"""

def train(model: SpeechRecognitionModel, device, train_loader: DataLoader, criterion: nn.CTCLoss, optimizer,
          scheduler, epoch):
    model.train()
    data_len = len(train_loader.dataset)
    for batch_idx, _data in enumerate(train_loader):
        spectrograms, labels, input_lengths, label_lengths = _data
        spectrograms, labels = spectrograms.to(device), labels.to(device)
        optimizer.zero_grad()
        output = model(spectrograms)  # (batch, time, n_class)
        output = F.log_softmax(output, dim=2)
        output = output.transpose(0, 1)  # (time, batch, n_class)
        loss = criterion(output, labels, input_lengths, label_lengths)
        loss.backward()
        optimizer.step()
        scheduler.step()
        if batch_idx % 100 == 0 or batch_idx == data_len:
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(spectrograms), data_len,
                       100. * batch_idx / len(train_loader), loss.item()))


def test(model: SpeechRecognitionModel, device, test_loader: DataLoader, criterion: nn.CTCLoss):
    print('\nevaluating...')
    model.eval()
    test_loss = 0
    test_cer, test_wer = [], []
    predictions = []
    with torch.no_grad():
        for i, _data in enumerate(test_loader):
            spectrograms, labels, input_lengths, label_lengths = _data
            spectrograms, labels = spectrograms.to(device), labels.to(device)
            output = model(spectrograms)  # (batch, time, n_class)
            output = F.log_softmax(output, dim=2)
            output = output.transpose(0, 1)  # (time, batch, n_class)
            loss = criterion(output, labels, input_lengths, label_lengths)
            test_loss += loss.item() / len(test_loader)
            decoded_preds, decoded_targets = greedy_decoder(output.transpose(0, 1), labels, label_lengths)
            for j in range(len(decoded_preds)):
                predictions.append(f"Prediction is: {decoded_preds[j]} | actual is: {decoded_targets[j]}.\n")
                test_cer.append(cer(decoded_targets[j], decoded_preds[j]))
                test_wer.append(wer(decoded_targets[j], decoded_preds[j]))
    avg_cer = sum(test_cer) / len(test_cer)
    avg_wer = sum(test_wer) / len(test_wer)
    with open("./data/experiment.txt", "w") as f:
        f.writelines(predictions)
    print(
        'Test set: Average loss: {:.4f}, Average CER: {:4f} Average WER: {:.4f}\n'.format(test_loss, avg_cer, avg_wer))

"""## GPU runtime
If you are using a GPU runtime, this will let you know what GPU and how much memory is available. Adjust your batch_size depending on which GPU
"""

!nvidia-smi

"""## Train
this will download the data on first run and may take a while. 
"""

learning_rate = 5e-4
batch_size = 20
epochs = 20
libri_train_set = "train-clean-100"
libri_test_set = "test-clean"

hparams = {
    "n_cnn_layers": 1,
    "n_rnn_layers": 1,
    "rnn_dim": 512,
    "n_class": 29,
    "n_feats": 128,
    "stride": 2,
    "dropout": 0.1,
    "learning_rate": learning_rate,
    "batch_size": batch_size,
    "epochs": epochs
}

use_cuda = torch.cuda.is_available()
torch.manual_seed(7)
device = torch.device("cuda" if use_cuda else "cpu")

if not os.path.isdir("./data"):
    os.makedirs("./data")

train_dataset = torchaudio.datasets.LIBRISPEECH("./data", url=libri_train_set, download=True)
test_dataset = torchaudio.datasets.LIBRISPEECH("./data", url=libri_test_set, download=True)

kwargs = {'num_workers': 1, 'pin_memory': True} if use_cuda else {}
train_loader = data.DataLoader(dataset=train_dataset,
                               batch_size=hparams['batch_size'],
                               shuffle=False,
                               collate_fn=lambda x: preprocessing(x, 'train'),
                               **kwargs)
test_loader = data.DataLoader(dataset=test_dataset,
                              batch_size=hparams['batch_size'],
                              shuffle=False,
                              collate_fn=lambda x: preprocessing(x, 'valid'),
                              **kwargs)

speech_model = SpeechRecognitionModel(
    hparams['n_cnn_layers'], hparams['n_rnn_layers'], hparams['rnn_dim'],
    hparams['n_class'], hparams['n_feats'], hparams['stride'], hparams['dropout']
).to(device)

print(speech_model)
print('Num Model Parameters', sum([param.nelement() for param in speech_model.parameters()]))

optimizer = optim.AdamW(speech_model.parameters(), hparams['learning_rate'])
criterion = nn.CTCLoss(blank=28).to(device)
scheduler = optim.lr_scheduler.OneCycleLR(optimizer, max_lr=hparams['learning_rate'],
                                          steps_per_epoch=int(len(train_loader)),
                                          epochs=hparams['epochs'],
                                          anneal_strategy='linear')

for epoch in range(1, epochs + 1):
    train(speech_model, device, train_loader, criterion, optimizer, scheduler, epoch)
    test(speech_model, device, test_loader, criterion)